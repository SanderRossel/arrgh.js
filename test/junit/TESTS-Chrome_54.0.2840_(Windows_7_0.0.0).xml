<?xml version="1.0"?>
<testsuite name="Chrome 54.0.2840 (Windows 7 0.0.0)" package="arrgh.js" timestamp="2016-11-12T21:17:42" id="0" hostname="Sander-PC" tests="589" errors="0" failures="0" time="7.211">
  <properties>
    <property name="browser.fullName" value="Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.87 Safari/537.36"/>
  </properties>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for an Enumerable should not return a current when it's empty" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for an Enumerable should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for an Enumerable should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for an Enumerable should return a current when moveNext is true" time="0.003" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for an Enumerable should not return a current when moveNext is false" time="0.012" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for an Enumerable should keep returning false after moveNext returned false once" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for an Enumerable should keep returning no current after moveNext returned false once" time="0.008" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for an Enumerable should return the same result every time it's iterated over (be reusable)" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for a List should not return a current when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for a List should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for a List should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for a List should return a current when moveNext is true" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for a List should not return a current when moveNext is false" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for a List should keep returning false after moveNext returned false once" time="0.007" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for a List should keep returning no current after moveNext returned false once" time="0.009" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for a List should return the same result every time it's iterated over (be reusable)" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for a List should throw if an item is added after getting the iterator, but before actual enumeration" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ArrayIterator for a List should throw if an item is added during enumeration" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DefaultIfEmptyIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DefaultIfEmptyIterator should return a current when moveNext is true" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DefaultIfEmptyIterator should not return a current when moveNext is false" time="0.013" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DefaultIfEmptyIterator should keep returning false after moveNext returned false once" time="0.009" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DefaultIfEmptyIterator should keep returning no current after moveNext returned false once" time="0.01" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DefaultIfEmptyIterator should return the same result every time it's iterated over (be reusable)" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DefaultIfEmptyIterator moveNext should return true once, even when empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DictionaryIterator should not return a current when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DictionaryIterator should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DictionaryIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DictionaryIterator should return a current when moveNext is true" time="0.004" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DictionaryIterator should not return a current when moveNext is false" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DictionaryIterator should keep returning false after moveNext returned false once" time="0.009" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DictionaryIterator should keep returning no current after moveNext returned false once" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DictionaryIterator should return the same result every time it's iterated over (be reusable)" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DictionaryIterator should throw if an item is added after getting the iterator, but before actual enumeration" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - DictionaryIterator should throw if an item is added during enumeration" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ExceptIterator should not return a current when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ExceptIterator should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ExceptIterator should not return a current when it's not moved" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ExceptIterator should return a current when moveNext is true" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ExceptIterator should not return a current when moveNext is false" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ExceptIterator should keep returning false after moveNext returned false once" time="0.009" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ExceptIterator should keep returning no current after moveNext returned false once" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ExceptIterator should return the same result every time it's iterated over (be reusable)" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupByIterator should not return a current when it's empty" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupByIterator should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupByIterator should not return a current when it's not moved" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupByIterator should return a current when moveNext is true" time="0.004" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupByIterator should not return a current when moveNext is false" time="0.018" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupByIterator should keep returning false after moveNext returned false once" time="0.01" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupByIterator should keep returning no current after moveNext returned false once" time="0.019" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupByIterator should return the same result every time it's iterated over (be reusable)" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupJoinIterator should not return a current when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupJoinIterator should not return moveNext when it's empty" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupJoinIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupJoinIterator should return a current when moveNext is true" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupJoinIterator should not return a current when moveNext is false" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupJoinIterator should keep returning false after moveNext returned false once" time="0.009" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupJoinIterator should keep returning no current after moveNext returned false once" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupJoinIterator should return the same result every time it's iterated over (be reusable)" time="0.004" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - GroupJoinIterator should loop once even when there is only a single undefined" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - IntersectIterator should not return a current when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - IntersectIterator should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - IntersectIterator should not return a current when it's not moved" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - IntersectIterator should return a current when moveNext is true" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - IntersectIterator should not return a current when moveNext is false" time="0.012" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - IntersectIterator should keep returning false after moveNext returned false once" time="0.012" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - IntersectIterator should keep returning no current after moveNext returned false once" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - IntersectIterator should return the same result every time it's iterated over (be reusable)" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - JoinIterator should not return a current when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - JoinIterator should not return moveNext when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - JoinIterator should not return a current when it's not moved" time="0.003" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - JoinIterator should return a current when moveNext is true" time="0.006" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - JoinIterator should not return a current when moveNext is false" time="0.013" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - JoinIterator should keep returning false after moveNext returned false once" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - JoinIterator should keep returning no current after moveNext returned false once" time="0.013" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - JoinIterator should return the same result every time it's iterated over (be reusable)" time="0.004" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - OrderedIterator should not return a current when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - OrderedIterator should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - OrderedIterator should not return a current when it's not moved" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - OrderedIterator should return a current when moveNext is true" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - OrderedIterator should not return a current when moveNext is false" time="0.009" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - OrderedIterator should keep returning false after moveNext returned false once" time="0.006" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - OrderedIterator should keep returning no current after moveNext returned false once" time="0.008" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - OrderedIterator should return the same result every time it's iterated over (be reusable)" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeCountIterator should not return a current when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeCountIterator should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeCountIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeCountIterator should return a current when moveNext is true" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeCountIterator should not return a current when moveNext is false" time="0.013" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeCountIterator should keep returning false after moveNext returned false once" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeCountIterator should keep returning no current after moveNext returned false once" time="0.008" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeCountIterator should return the same result every time it's iterated over (be reusable)" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeIterator should not return a current when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeIterator should not return moveNext when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeIterator should return a current when moveNext is true" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeIterator should not return a current when moveNext is false" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeIterator should keep returning false after moveNext returned false once" time="0.007" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeIterator should keep returning no current after moveNext returned false once" time="0.009" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RangeIterator should return the same result every time it's iterated over (be reusable)" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RepeatIterator should not return a current when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RepeatIterator should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RepeatIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RepeatIterator should return a current when moveNext is true" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RepeatIterator should not return a current when moveNext is false" time="0.008" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RepeatIterator should keep returning false after moveNext returned false once" time="0.006" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RepeatIterator should keep returning no current after moveNext returned false once" time="0.015" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - RepeatIterator should return the same result every time it's iterated over (be reusable)" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ReverseIterator should not return a current when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ReverseIterator should not return moveNext when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ReverseIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ReverseIterator should return a current when moveNext is true" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ReverseIterator should not return a current when moveNext is false" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ReverseIterator should keep returning false after moveNext returned false once" time="0.006" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ReverseIterator should keep returning no current after moveNext returned false once" time="0.01" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - ReverseIterator should return the same result every time it's iterated over (be reusable)" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - SelectIterator should not return a current when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - SelectIterator should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - SelectIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - SelectIterator should return a current when moveNext is true" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - SelectIterator should not return a current when moveNext is false" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - SelectIterator should keep returning false after moveNext returned false once" time="0.01" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - SelectIterator should keep returning no current after moveNext returned false once" time="0.013" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - SelectIterator should return the same result every time it's iterated over (be reusable)" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - SelectIterator should call the selector once, even when the single element is undefined" time="0.006" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SelectManyIterator should not return a current when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SelectManyIterator should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SelectManyIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SelectManyIterator should return a current when moveNext is true" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SelectManyIterator should not return a current when moveNext is false" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SelectManyIterator should keep returning false after moveNext returned false once" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SelectManyIterator should keep returning no current after moveNext returned false once" time="0.012" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SelectManyIterator should return the same result every time it's iterated over (be reusable)" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipIterator should not return a current when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipIterator should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipIterator should return a current when moveNext is true" time="0.004" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipIterator should not return a current when moveNext is false" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipIterator should keep returning false after moveNext returned false once" time="0.03" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipIterator should keep returning no current after moveNext returned false once" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipIterator should return the same result every time it's iterated over (be reusable)" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipWhileIterator should not return a current when it's empty" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipWhileIterator should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipWhileIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipWhileIterator should return a current when moveNext is true" time="0.007" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipWhileIterator should not return a current when moveNext is false" time="0.013" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipWhileIterator should keep returning false after moveNext returned false once" time="0.011" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipWhileIterator should keep returning no current after moveNext returned false once" time="0.013" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - SkipWhileIterator should return the same result every time it's iterated over (be reusable)" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeIterator should not return a current when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeIterator should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeIterator should return a current when moveNext is true" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeIterator should not return a current when moveNext is false" time="0.01" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeIterator should keep returning false after moveNext returned false once" time="0.007" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeIterator should keep returning no current after moveNext returned false once" time="0.008" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeIterator should return the same result every time it's iterated over (be reusable)" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeWhileIterator should not return a current when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeWhileIterator should not return moveNext when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeWhileIterator should not return a current when it's not moved" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeWhileIterator should return a current when moveNext is true" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeWhileIterator should not return a current when moveNext is false" time="0.009" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeWhileIterator should keep returning false after moveNext returned false once" time="0.007" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeWhileIterator should keep returning no current after moveNext returned false once" time="0.008" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - TakeWhileIterator should return the same result every time it's iterated over (be reusable)" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - UnionIterator should not return a current when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - UnionIterator should not return moveNext when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - UnionIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - UnionIterator should return a current when moveNext is true" time="0.007" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - UnionIterator should not return a current when moveNext is false" time="0.016" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - UnionIterator should keep returning false after moveNext returned false once" time="0.012" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - UnionIterator should keep returning no current after moveNext returned false once" time="0.013" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - UnionIterator should return the same result every time it's iterated over (be reusable)" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - WhereIterator should not return a current when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - WhereIterator should not return moveNext when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - WhereIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - WhereIterator should return a current when moveNext is true" time="0.006" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - WhereIterator should not return a current when moveNext is false" time="0.016" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - WhereIterator should keep returning false after moveNext returned false once" time="0.009" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - WhereIterator should keep returning no current after moveNext returned false once" time="0.021" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators - WhereIterator should return the same result every time it's iterated over (be reusable)" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - ZipIterator should not return a current when it's empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - ZipIterator should not return moveNext when it's empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - ZipIterator should not return a current when it's not moved" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - ZipIterator should return a current when moveNext is true" time="0.004" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - ZipIterator should not return a current when moveNext is false" time="0.013" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - ZipIterator should keep returning false after moveNext returned false once" time="0.01" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - ZipIterator should keep returning no current after moveNext returned false once" time="0.014" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Iterators  - ZipIterator should return the same result every time it's iterated over (be reusable)" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable ctors should construct from an array" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable ctors should construct from some random objects" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable ctors should construct from another Enumerable" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable ctors should construct from a string" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable ctors should throw on an invalid argument" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable aggregate without seed should throw when the enumerable is empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable aggregate without seed should create a person with accumulated age" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable aggregate without seed should reverse the sentence" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable aggregate with seed should throw when the enumerable is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable aggregate with seed should create a person with accumulated age" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable aggregate with seed should select the longest name" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable aggregate with seed should reverse the sentence" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable aggregate with seed should create a person with accumulated age and use a result selector" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable all with an empty enumerable should always returns true" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable all with an empty enumerable should always return true also without a predicate" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable all should return true when all elements match the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable all should return false when some (or all) elements don't match the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable all should throw when no predicate is defined" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable any with an empty enumerable should always returns false" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable any with an empty enumerable should always return false also when a predicate is defined" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable any should return true when no predicate is defined" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable any should return true when an element matches the predicate" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable any should return false when no element matches the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable asEnumerable should return a new enumerable" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable asEnumerable should contain the same elements as the original enumerable" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable average should throw if the collection is empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable average with a collection of numerics should return the integer average" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable average with a collection of numerics should return the integer average of negative values" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable average with a collection of numerics should return the decimal average" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable average with a collection of numerics should return the fracture average" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable average with a collection of numerics should calculate the average (with floating-point rounding error)" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable average with a collection of non-numerics should return NaN if the collection has objects" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable average with a collection of non-numerics should return NaN if some elements are objects" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable average with a collection of non-numerics should return a correct average when using some strings" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable average with a collection of non-numerics should return a correct average when using only strings" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable average with a collection of non-numerics should work with single number arrays" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable average with a collection of non-numerics should not work with multiple number arrays" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable average using a selector should return the average age" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable contains with an empty enumerable should not contain undefined" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable contains with an empty enumerable should not contain 'hello'" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable contains should return true when the collection contains the value" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable contains should return true when the collection contains the object" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable contains should return false when the collection does not contain the value" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable contains should return false when the collection does not contain the object" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable contains should return true when the elements don't match reference (or type), but the comparer matches them" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable contains should return false if the elements don't match reference (or type), and the comparer also doesn't match any" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable defaultIfEmpty should return the original elements if there are any" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable defaultIfEmpty should return the default value in a collection if the collection is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable distinct should remove doubles from a collection" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable distinct should return the original collection when no doubles are found" time="0.006" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable distinct should remove doubles based on an equality comparer" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable distinct should remove doubles based on a rather weird, but edge-case, equality comparer" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable except should return elements that are in the source, but not in the other collection" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable except should return all elements if the other collection is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable except should return no elements if the source is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable except should return a set with distinct elements" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable except should return a set with distinct elements based on an equality comparer" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable first should throw when the collection is empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable first should throw when a predicate is specified, but the collection is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable first should throw when the collection is not empty, but no element matches the predicate" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable first should return the first element if no predicate is defined" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable first should return the first element that matches the predicate" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable firstOrDefault should return undefined when the collection is empty and no default is specified" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable firstOrDefault should return undefined when the collection is not empty, but no element matches the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable firstOrDefault should return the first element if no predicate is defined" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable firstOrDefault should return the first element that matches the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable firstOrDefault should return the default when a default is defined and the collection is empty" time="0.006" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable firstOrDefault should return the default when a default is defined and no element matches the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable forEach should not loop through an empty collection" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable forEach should loop through all people" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable forEach should stop looping when false is returned" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable forEach should stop looping when anything falsey (except null and undefined) is returned" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable forEach should continue looping when true is returned" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable forEach should continue looping when anything truthy (and null and undefined) is returned" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable forEach should continue looping when anything null is returned" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable forEach should continue looping when anything null is returned" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable intersect should return elements that are in the source and in the other collection" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable intersect should return no elements if the other collection is empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable intersect should return no elements if the source is empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable intersect should return a set with distinct elements" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable intersect should return a set with distinct elements based on an equality comparer" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max should throw when the collection is empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max with a collection of numerics should return the integer max" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max with a collection of numerics should return the decimal max" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max with a collection of numerics should return Infinity" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max with a collection of numerics should not return -Infinity" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max with a collection of numerics should not return NaN" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max with a collection of numerics should ignore undefineds and nulls" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max with a collection of non-numerics should return NaN if the collection has objects" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max with a collection of non-numerics should ignore NaN values if some elements are objects" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max with a collection of non-numerics should return a correct max when using some strings" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max with a collection of non-numerics should return a correct max when using only strings" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max with a collection of non-numerics should convert single number arrays to numerics" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max with a collection of non-numerics should not convert multi number arrays and treat them as NaN" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable max using a selector should return the max age" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min should throw when the collection is empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min with a collection of numerics should return the integer min" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min with a collection of numerics should return the decimal min" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min with a collection of numerics should not return Infinity" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min with a collection of numerics should return -Infinity" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min with a collection of numerics should return NaN" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min with a collection of numerics should ignore undefineds and nulls" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min with a collection of non-numerics should return NaN if the collection has objects" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min with a collection of non-numerics should return NaN if some elements are objects" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min with a collection of non-numerics should return a correct min when using some strings" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min with a collection of non-numerics should return a correct min when using only strings" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min with a collection of non-numerics should work with single number arrays" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min with a collection of non-numerics should not work with multiple number arrays" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable min using a selector should return the min age" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable typeof should return only booleans" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable typeof should return only numbers" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable typeof should return only strings" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable typeof should return only functions" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable typeof should return only objects" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable typeof should return only undefineds" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable typeof should return only nulls" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable typeof should return only enumerables" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable reverse should reverse a list of numerics" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable reverse should reverse a list of objects" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable select should contain all first names" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable select should contain objects with first and last names" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable select should contain indices and full names" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable selectMany should flatten hobbies of people" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable selectMany should flatten first names of people" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable selectMany should flatten hobbies of people and apply a result selector" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable selectMany should flatten hobbies of people on uneven indices and return people on even indices" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable selectMany should flatten hobbies of people on uneven indices and return people on even indices and apply a result selector" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sequenceEquals should equal when all elements are equal" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sequenceEquals should equal when all references are equal" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sequenceEquals should not equal when all objects are equal, but references are not" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sequenceEquals should equal when not all objects are equal, but the equality comparer says they are" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sequenceEquals should not equal when the number of objects don't match" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sequenceEquals should not equal when the number of objects don't match" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sequenceEquals should equal when all elements are equal, but not all elements have the same type" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sequenceEquals should not equal when all elements are equal in value, but not of the same type" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sequenceEquals should equal when all elements are equal in value, but not of the same type, but an equality comparer is supplied" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable single should throw when the collection is empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable single should throw when a predicate is specified, but the collection is empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable single should throw when the collection is not empty, but no element matches the predicate" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable single should throw when the collection contains more than one element and no predicate is defined" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable single should return the only element that's in the collection" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable single should return the only element in the collection that satisfies the predicate" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable single should throw when more elements in the collection satisfy the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable singleOrDefault should return undefined when the collection is empty and no default is specified" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable singleOrDefault should return undefined when the collection is not empty, but no element matches the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable singleOrDefault should throw when the collection contains more than one element and no predicate is defined" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable singleOrDefault should return the only element that's in the collection" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable singleOrDefault should return the only element in the collection that satisfies the predicate" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable singleOrDefault should throw when more elements in the collection satisfy the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable singleOrDefault should return the default when a default is defined and the collection is empty" time="0.009" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable singleOrDefault should return the default when a default is defined and no element matches the predicate" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable skip should skip no elements when the count is negative" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable skip should skip no elements" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable skip should skip the first element" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable skip should skip three elements" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable skip should skip all elements" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable skip should skip far beyond all elements" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable skipWhile should skip no elements" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable skipWhile should skip the first element" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable skipWhile should skip three elements" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable skipWhile should skip, but then meet the while criteria again" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable skipWhile should skip all elements" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable skipWhile should skip far beyond all elements" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sum should throw if the collection is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sum with a collection of numerics should return the sum of integers" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sum with a collection of numerics should return the sum of negative integers" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sum with a collection of numerics should return the sum of decimals" time="0.006" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sum with a collection of numerics should return the sum of fractures" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sum with a collection of numerics should calculate the sum (with floating-point rounding error)" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sum with a collection of non-numerics should return NaN if the collection has objects" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sum with a collection of non-numerics should return NaN if some elements are objects" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sum with a collection of non-numerics should return a correct sum when using some strings" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sum with a collection of non-numerics should return a correct sum when using only strings" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sum with a collection of non-numerics should work with single number arrays" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sum with a collection of non-numerics should not work with multiple number arrays" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable sum using a selector should return the sum of ages" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable take should take no elements when the count is negative" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable take should take the first three people" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable take should take no people" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable take should take only 10 numbers out of an infinite range" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable take should take all elements" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable take should not take more elements than the collection contains" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable takeWhile should take no elements" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable takeWhile should take the first element" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable takeWhile should take three elements" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable takeWhile should take, but then meet the while criteria again" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable takeWhile should take all elements" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable takeWhile should not take more elements than the collection contains" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable where should find only Bills" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable where should not find any people with last name Jobs" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable where should find one element, Clinton" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable where should find one element, McQueen" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable where should find people on even indices" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable zip should add the elements of two collections" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable zip should stop zipping when the source collection has no more elements" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable zip should stop zipping when the other collection has no more elements" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable zip should return an empty result when one of the collections is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable zip should zip people" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable count with an empty enumerable should always returns 0" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable count with an empty enumerable should always return 0 even when a predicate is defined" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable count should return the number of elements when no predicate is defined" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable count should return the number of matching elements when some elements match the predicate" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable count should return 0 when no element match the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable elementAt should return the element at the 0th position" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable elementAt should return the elements at the 2nd position" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable elementAt should return the element at the last position" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable elementAt should throw when the index is negative" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable elementAt should throw when the index is greater than the number of elements -1" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable elementAt should not throw in the edge case the inner (implementation) default is the same as an element" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable elementAtOrDefault should return the element at the 0th position" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable elementAtOrDefault should return the element at the 2nd position" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable elementAtOrDefault should return the element at the last position" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable elementAtOrDefault should return undefined when the index is negative and no default value is supplied" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable elementAtOrDefault should return undefined when the index is out of bounds and no default value is supplied" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable elementAtOrDefault should return the default value when the index is negative and a default value is supplied" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable elementAtOrDefault should return the default value when the index is positive and out of bounds and a default value is supplied" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable indexOf should return -1 if the element is not found" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable indexOf should return -1 if the fromIndex is greater than the length of the collection" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable indexOf should return the index of the element if the fromIndex starts at the index of that element" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable indexOf should return -1 if the fromIndex is greater than the index of the element" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable indexOf should return the index of the first element" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable indexOf should return the index of the found element" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable indexOf should return the index of the found element after the fromIndex" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable last should throw when the collection is empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable last should throw when a predicate is specified, but the collection is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable last should throw when the collection is not empty, but no element matches the predicate" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable last should return the last element if no predicate is defined" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable last should return the last element that matches the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable last should return the last element that matches the predicate, even when it's not the last in the collection" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable lastOrDefault should return undefined when the collection is empty and no default is specified" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable lastOrDefault should return undefined when the collection is not empty, but no element matches the predicate" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable lastOrDefault should return the last element if no predicate is defined" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable lastOrDefault should return the last element that matches the predicate" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable lastOrDefault should return the last element that matches the predicate, even when it's not the last in the collection" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable lastOrDefault should return the default when a default is defined and the collection is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable lastOrDefault should return the default when a default is defined and no element matches the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable toArray should convert back to the original array" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable toArray should convert back to an empty array" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable toArray should convert back to a string array" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable toArray should convert back to a string" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests unions unionAll should union two distinct collections" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests unions unionAll should union two collections with overlapping elements" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests unions unionAll should return the second collection when the first is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests unions unionAll should return the first collection when the second is empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests unions union should union two distinct collections" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests unions union should create a set of two collections with overlapping elements" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests unions union should return the second collection as a set when the first is empty" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests unions union should return the first collection as a set when the second is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests unions union should union two distinct collections with objects" time="0.006" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests unions union should create a set of two collections with overlapping object elements" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests unions union should create a set of two collections with distinct objects that are equal according to an equality comparer" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests unions union should union only strings with a unique second character" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests joins groupBy should group by key" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests joins groupBy should group by key and use an element selector" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests joins groupBy should group by key, use an element selector and project to a custom result" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests joins groupBy should group by key, use an element selector, project to a custom result and use the equality comparer" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests joins groupBy should group by key, use an element selector and use the equality comparer" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests joins groupBy should group by key, project to a custom result and use the equality comparer" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests joins groupBy should group by key and use the equality comparer" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests joins groupBy should group by key and project to a custom result" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests joins groupJoin should match people with people with the same name" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests joins groupJoin should match people with people with the same name first letter based on a comparer" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests joins join should join on full name" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests joins join should join on first name" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests joins join should join on first letter of first name using an equality comparer" time="0.007" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests orderings orderBy should order by first" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests orderings orderBy should order by first in descending order" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests orderings orderBy should order by first using a comparer" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests orderings orderBy should order by first in descending order using a comparer" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests orderings orderBy should order NaN, undefined, null, then everything else" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests orderings orderBy should order NaN, undefined, null, then everything else descending" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests orderings orderBy should order a huge list" time="6.016" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests orderings thenBy should order by first then last" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests orderings thenBy should order by last then first" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests orderings thenBy should order by name in descending order" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests orderings thenBy should order by first in descending order then by last and then by age descending" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests orderings thenBy should order by last then first using a comparer" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests orderings thenBy should order by first in descending order then by last and then by age descending using only comparers" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toDictionary should create a dictionary" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toDictionary should throw when keys are double" time="0.01" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toDictionary should create a dictionary with last names as key" time="0.002" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toDictionary should create a dictionary with last names as key and full names as elements" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toDictionary should create a dictionary with last names as key, full names as elements and an equality comparer and throw because the key is already present" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toDictionary should create a dictionary with last names as key and an equality comparer and throw because the key is already present" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toList should create a list" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toList should create a list with the original items" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toList should create an empty list " time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toList should create a list containing the characters of Hello" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toLookup should group people by first name" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toLookup should group by first name and return a group with one element" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toLookup should group by first name and return a group with elements" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toLookup should group by first name and also return not existing names, but without elements" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toLookup should group people by first name and select full names as elements" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toLookup should group people by first name, select full names as elements and use an equality comparer" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests toSomethings toLookup should group people by first name and use an equality comparer" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics empty should be a singleton" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics empty should be empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics range should throw when count is lower than 0" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics range should throw when start plus count - 1 (because start is the first) is higher than max" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics range should return an empty range when count is 0" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics range should return start when count is 1" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics range should return max when start is max and count is 1" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics range should create 1 to 10" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics range should create -3 to 3" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics range should create 42 to 50" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics range should create an empty range when start is higher than max and no count is specified" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics range should create max - 2 to max" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics range should create -max to max (no way to actually test)" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics repeat should create an empty collection when count is 0" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics repeat should repeat 'Hello' 10 times" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics repeat should return 'Hello' once when count is 1" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics repeat should repeat a person five times" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Enumerable statics repeat should throw when count is lower than 0" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List ctors should construct from an array" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List ctors should construct from some random objects" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List ctors should construct from another Enumerable" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List ctors should construct from a string" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List ctors should throw on an invalid argument" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List add should have the item added" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List addRange should add all the items in an array" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List addRange should add all the items in another list" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List addRange should add all the items that are passed as arguments" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List asEnumerable should return a new enumerable" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List asEnumerable should not be a list" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List asEnumerable should contain the same elements as the original enumerable" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List remove should remove an item that's in the list" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List remove should not remove anything when the item is not in the list" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List indices should give the first added element an index of 0" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List indices should generate indices 0, 1, 2 if three items are added" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List indices should overwrite any items that are not added through add methods" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List indices should remove the last index when that item is removed" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List count with an empty enumerable should always returns 0" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List count with an empty enumerable should always return 0 even when a predicate is defined" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List count should return the number of elements when no predicate is defined" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List count should return the number of matching elements when some elements match the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List count should return 0 when no element match the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List elementAt should return the element at the 0th position" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List elementAt should return the elements at the 2nd position" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List elementAt should return the element at the last position" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List elementAt should throw when the index is negative" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List elementAt should throw when the index is greater than the number of elements -1" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List elementAt should not throw in the edge case the inner (implementation) default is the same as an element" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List elementAtOrDefault should return the element at the 0th position" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List elementAtOrDefault should return the element at the 2nd position" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List elementAtOrDefault should return the element at the last position" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List elementAtOrDefault should return undefined when the index is negative and no default value is supplied" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List elementAtOrDefault should return undefined when the index is out of bounds and no default value is supplied" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List elementAtOrDefault should return the default value when the index is negative and a default value is supplied" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List elementAtOrDefault should return the default value when the index is positive and out of bounds and a default value is supplied" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List indexOf should return -1 if the element is not found" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List indexOf should return -1 if the fromIndex is greater than the length of the collection" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List indexOf should return the index of the element if the fromIndex starts at the index of that element" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List indexOf should return -1 if the fromIndex is greater than the index of the element" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List indexOf should return the index of the first element" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List indexOf should return the index of the found element" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List indexOf should return the index of the found element after the fromIndex" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List last should throw when the collection is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List last should throw when a predicate is specified, but the collection is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List last should throw when the collection is not empty, but no element matches the predicate" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List last should return the last element if no predicate is defined" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List last should return the last element that matches the predicate" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List last should return the last element that matches the predicate, even when it's not the last in the collection" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List lastOrDefault should return undefined when the collection is empty and no default is specified" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List lastOrDefault should return undefined when the collection is not empty, but no element matches the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List lastOrDefault should return the last element if no predicate is defined" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List lastOrDefault should return the last element that matches the predicate" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List lastOrDefault should return the last element that matches the predicate, even when it's not the last in the collection" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List lastOrDefault should return the default when a default is defined and the collection is empty" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List lastOrDefault should return the default when a default is defined and no element matches the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List toArray should convert back to the original array" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List toArray should convert back to an empty array" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List toArray should convert back to a string array" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests List toArray should convert back to a string" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary add without an equality comparer should add and get a key" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary add without an equality comparer should add strings and people as key-value pairs" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary add without an equality comparer should add functions as key-value pairs" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary add without an equality comparer should add regular objects as key-value pairs" time="0.005" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary add without an equality comparer should add objects with overridden toString methods as key-value pairs" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary add without an equality comparer should throw when an item with the same key is already added" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary add with an equality comparer should add strings and people as key-value pairs" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary add with an equality comparer should ignore overridden toString methods and use the comparers getHash instead" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary add with an equality comparer should throw when an item that compares to a key that is already added" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary containsKey without an equality comparer should contain the simple string key" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary containsKey without an equality comparer should contain the complex object key" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary containsKey without an equality comparer should contain the custom toString key" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary containsKey without an equality comparer should contain the custom getHash key" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary containsKey without an equality comparer should work with undefined, null and NaN" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary containsKey with an equality comparer should work with a weird default comparer" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary containsKey with an equality comparer should contain the simple string key" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary containsKey with an equality comparer should contain the custom toString key" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary containsKey with an equality comparer should contain the custom getHash key" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary remove without an equality comparer should remove the item" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary remove without an equality comparer should remove the item, but not the hash clash" time="0.001" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary remove with an equality comparer should remove the item" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary remove with an equality comparer should remove the item, but not the hash clash" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary count with an empty enumerable should always returns 0" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary count with an empty enumerable should always return 0 even when a predicate is defined" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary count should return the number of elements when no predicate is defined" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary count should return the number of matching elements when some elements match the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <testcase name="arrgh.js tests Dictionary count should return 0 when no element match the predicate" time="0" classname="Chrome_54_0_2840_(Windows_7_0_0_0).arrgh.js.arrgh.js tests"/>
  <system-out>
    <![CDATA[
]]>
  </system-out>
  <system-err/>
</testsuite>